[{"path":"https://github.com/openwashdata/floodresponsemw/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emmanuel Mhango. Author, maintainer. Benja Moree. Contributor. Davie Selenje. Contributor. Donald Robertson. Contributor. Eramore. Contributor. Evance. Contributor. Finlay Paterson. Contributor. Jimmy Makande. Contributor. Julius Kutaumbe. Contributor. Laurent Levesque. Contributor. Mayamiko Jumbe. Contributor. Rac Mkanga. Contributor. Olipa. Contributor. Patrick Katholowamo. Contributor. rashid Kumbu. Contributor. Rober Gerald. Contributor. Thokozani Kawaza. Contributor.","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mhango E (2025). “floodresponsemw: Water Point Assessments - USAID Flood Response Malawi 2019-2020.” https://github.com/openwashdata/floodresponsemw.","code":"@Misc{mhango:2025,   title = {floodresponsemw: Water Point Assessments - USAID Flood Response Malawi 2019-2020},   author = {Emmanuel Mhango},   year = {2025},   url = {https://github.com/openwashdata/floodresponsemw},   abstract = {Field-level data on rural water point status and functionality across Malawi, collected during the USAID Flood Response initiative (2019-2020). Includes GPS locations, flood impact indicators, pump functionality, water quality measurements, and microbial contamination data from mWater mobile assessments.},   version = {0.0.0.9000}, }"},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md - OpenWashData R Package Review Guide","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"guide helps Claude Code review R data packages openwashdata organization, ensuring consistency, quality, completeness across published datasets.","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"review process follows PLAN → CREATE → TEST → DEPLOY workflow. entire review process starts package dev branch, issues resolved final PR dev main created. phase requires explicit user approval proceeding. CRITICAL WORKFLOW RULE: Claude MUST stop completing individual issue. user must manually restart Claude next issue.","code":""},{"path":[]},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"id_1-plan-phase","dir":"","previous_headings":"Review Workflow","what":"1. PLAN Phase","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"initiated via /review-package [package-name], Claude : Download latest CLAUDE.md openwashdata/pkgreview repository CLAUDE.md already exists, append review guide content Create backup existing CLAUDE.md appending Provide fallback options download fails Verify package created washr template Check required directories: R/, data/, data-raw/, inst/extdata/, man/ Confirm presence key files: DESCRIPTION, README.Rmd, _pkgdown.yml Check existing PRs dev branches Issue 1 (General Information & Metadata) created initially Subsequent issues created previous PRs merged ensures issue builds completed changes Issue 1: General Information & Metadata Issue 2: Data Content & Processing (created Issue 1 merged) Issue 3: Documentation (created Issue 2 merged) Issue 4: Tests & CI/CD (created Issue 3 merged) Summary findings List issues addressed Provide explicit instructions user review Issue #1 GitHub Request user confirmation proceeding","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"id_2-create-phase","dir":"","previous_headings":"Review Workflow","what":"2. CREATE Phase","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"user approval, work issues ONE TIME. SEQUENTIAL WORKFLOW: 1. User runs /review-package start - Issue #1 created 2. User reviews Issue #1 GitHub confirms readiness 3. User runs /review-issue 1 work Issue #1 4. Claude presents planned changes waits user confirmation 5. user approval, Claude creates new branch dev 6. Claude implements changes issue 7. Claude commits changes descriptive message 8. Claude creates PR dev branch (main!) 9. CLAUDE MUST STOP COMPLETELY - proceed next issue 10. User reviews PR, merges dev 11. User runs /create-next-issue create Issue #2 12. Repeat steps 2-11 subsequent issue CRITICAL: Claude MUST automatically continue next issue. workflow STOPS creating PR. Creating Issue #1: - User review Issue #1 GitHub confirm checklist items - User can make necessary adjustments issue description - ready, user runs /review-issue 1 start working - issue builds previous one, ensuring changes cumulative throughout review process","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"issue-1-general-information--metadata","dir":"","previous_headings":"Review Workflow > 2. CREATE Phase","what":"Issue 1: General Information & Metadata","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"Claude must check items completed update issue Title (descriptive, <65 characters) Description (clear purpose statement) Authors ORCID IDs License: CC 4.0 Dependencies properly declared Version follows semantic versioning updates made DESCRIPTION, run washr::update_description() CITATION.cff file present valid Generate citation using washr::update_citation() now without DOI","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"issue-2-data-content--processing","dir":"","previous_headings":"Review Workflow > 2. CREATE Phase","what":"Issue 2: Data Content & Processing","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"File Structure - [ ] primary data files present data/ use .rda format - [ ] raw exportable data files (CSV/XLSX) inst/extdata/ - [ ] Main dataset accessible via function matching package name - [ ] sensitive personally identifiable information present Data Quality Checks - [ ] Missing values properly coded NA - [ ] Categorical variables checked consistency - [ ] Date variables proper format - [ ] Numeric variables reasonable ranges - [ ] text data encoded UTF-8 Data Processing Script - [ ] data_processing.R data-raw/ - [ ] Script reproducible well-commented - [ ] Raw data files preserved data-raw/ - [ ] dictionary.csv variable descriptions - [ ] Uses tidyverse conventions - [ ] Handles data cleaning transparently - [ ] Analysis testing scripts preserved analysis/ directory","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"issue-3-documentation","dir":"","previous_headings":"Review Workflow > 2. CREATE Phase","what":"Issue 3: Documentation","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"README.Rmd follows openwashdata template Dynamic content generation works Installation instructions present Data overview dimensions Variable dictionary table rendered License citation sections complete Roxygen documentation exported functions _pkgdown.yml configured Plausible analytics Package website builds without errors","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"issue-4-tests--cicd","dir":"","previous_headings":"Review Workflow > 2. CREATE Phase","what":"Issue 4: Tests & CI/CD","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"Add GitHub Actions workflow R-CMD-check Add R-CMD-check badge README.Rmd Package passes devtools::check() errors/warnings Examples run successfully Data loads correctly MANDATORY PROCESS ISSUE: 1. Present planned changes request user confirmation implementing - ALWAYS WAIT explicit user approval (yes//edit) proceeding 2. Create feature branch dev (e.g., issue-1-metadata) 3. Implement changes regular check-ins: - checklist item major change: - Announce specific change - Implement - Show result - CHECK-: “Ready commit change? (commit/continue)” - “commit”: Create atomic commit change 4. Run tests changes 5. Update GitHub issue check completed items: - Use gh issue view [number] get current issue body - Update checkboxes - [ ] - [x] completed items - Use gh issue edit [number] --body \"[updated body]\" save 6. Create PR detailed summary including commits: ``` gh pr create –base dev –title “Fix Issue #1: [Description]” –body “## Summary Addresses Issue #[number] ## Changes Made - [Specific changes] ## Completed Checklist Items - [x] Item 1 - [x] Item 2 Closes #[number]” ``7. **STOP IMMEDIATELY** - Output: \"✅ PR created Issue #[number]. Issue checklist updated. Please review merge dev, run/create-next-issue` continue.” 8. PROCEED issue","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"id_3-test-phase","dir":"","previous_headings":"Review Workflow","what":"3. TEST Phase","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"Run comprehensive package checks: Verify: - tests pass - R CMD check issues - Documentation renders correctly - Website builds successfully","code":"devtools::check() devtools::build() pkgdown::build_site()"},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"id_4-deploy-phase","dir":"","previous_headings":"Review Workflow","what":"4. DEPLOY Phase","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"Build deploy pkgdown website Verify Plausible analytics tracking Confirm changes committed Approve PR merge main branch Create release using /create-release command","code":""},{"path":[]},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"required-files-structure","dir":"","previous_headings":"Key Standards","what":"Required Files Structure","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"","code":"package-name/ ├── DESCRIPTION ├── NAMESPACE ├── R/ │   └── package-name.R ├── data/ │   └── package-name.rda ├── data-raw/ │   ├── data_processing.R │   └── dictionary.csv ├── inst/ │   ├── CITATION │   └── extdata/ │       ├── package-name.csv │       └── package-name.xlsx ├── man/ ├── vignettes/                # Optional vignettes directory │   └── articles/             # Always use articles/ subdirectory │       └── example.Rmd       # Keep all vignettes here ├── analysis/                 # Analysis and testing scripts (not built) │   ├── test_package.R │   ├── data_analysis.R │   └── validation.R ├── README.Rmd ├── README.md ├── NEWS.md                   # Package changelog ├── CITATION.cff ├── _pkgdown.yml              # Standard openwashdata configuration ├── .Rbuildignore └── .github/     └── workflows/         └── R-CMD-check.yaml"},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"vignettes-convention","dir":"","previous_headings":"Key Standards","what":"Vignettes Convention","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"IMPORTANT: vignettes must stored vignettes/articles/ subdirectory, directly vignettes/. convention: - Ensures vignettes rendered correctly pkgdown - Keeps vignettes separate package documentation - Prevents CRAN submission issues - Maintains consistency across openwashdata packages Example structure:","code":"vignettes/ └── articles/     ├── getting-started.Rmd     ├── data-analysis.Rmd     └── case-study.Rmd"},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"r-scripts-for-reproducibility","dir":"","previous_headings":"Key Standards","what":"R Scripts for Reproducibility","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"R scripts used testing, validation, analysis package development must preserved repository reproducibility purposes. scripts stored analysis/ directory package root level.","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"why-analysis-directory","dir":"","previous_headings":"Key Standards > R Scripts for Reproducibility","what":"Why analysis/ directory:","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"included installed package (automatically ignored R CMD build) Available GitHub future reference reproducibility Organized separately package code configuration needed - R automatically excludes top-level directories recognized package components","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"script-organization-in-analysis","dir":"","previous_headings":"Key Standards > R Scripts for Reproducibility","what":"Script Organization in analysis/:","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"test_package.R - Scripts testing package functionality data_analysis.R - Exploratory data analysis scripts validation.R - Data validation quality checks comparison.R - Scripts comparing different data versions analysis utility scripts used development approach ensures analysis work remains transparent reproducible without affecting package installation CRAN compliance.","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"package-dependencies","dir":"","previous_headings":"Key Standards","what":"Package Dependencies","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"Common dependencies data packages: - dplyr, tidyr (data manipulation) - readr, readxl (data import) - janitor (data cleaning) - desc (DESCRIPTION parsing) - gt, kableExtra (table formatting) - usethis (development workflows, including NEWS.md versioning)","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"quality-criteria","dir":"","previous_headings":"Key Standards","what":"Quality Criteria","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"Reproducibility: data processing steps documented runnable Transparency: Raw data preserved clear transformation pipeline Accessibility: Multiple export formats (R, CSV, XLSX) Documentation: Comprehensive variable descriptions usage examples Consistency: Follows openwashdata naming structure conventions","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"branch-and-pr-strategy","dir":"","previous_headings":"","what":"Branch and PR Strategy","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"Package Review Branch Structure: - main - Production branch (protected) - dev - Development branch review work happens - issue-[n]-description - Feature branches issue (created dev) PR Flow: 1. issue gets PR feature branch → dev 2. User reviews merges issue PR dev 3. issues resolved, create final PR dev → main 4. Never create PRs directly main review process","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"commands","dir":"","previous_headings":"","what":"Commands","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"/review-package [package-name] - Start package review (analyzes package creates Issue #1 ) /review-issue [number] - Work specific issue (STOPS creating PR) /create-next-issue - Create next issue sequence (previous PR merged) /review-status - Check current review progress /review-complete - issues merged dev, create final PR main /create-release [version] - Create new release changelog","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"review-workflow-summary","dir":"","previous_headings":"","what":"Review Workflow Summary","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"package review follows sequential, issue--issue approach: Start: Run /review-package analyze package create Issue #1 Work: Use /review-issue [number] work current issue Submit: Create PR dev branch issue Continue: merging, run /create-next-issue create next issue ensures : - issue builds changes previous issues - dev branch stays --date throughout review - Changes reviewed merged incrementally - final PR dev main contains cumulative improvements","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"issue-resolution-workflow","dir":"","previous_headings":"","what":"Issue Resolution Workflow","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"working issue via /review-issue [number]: Branch - Create feature branch dev: git checkout -b issue-[number]-description Analyze - Review specific issue requirements checklist items Present analysis needs done CHECK-#1: “’s found. proceed changes? (yes/)” Implement Changes Stages Announce ’re Make change Show result CHECK-: “Change completed. Ready commit? Type ‘commit’ save change, ‘continue’ make changes.” user says “commit”: Run git add -&& git commit -m \"Description specific change\" Repeat significant change Test - changes, verify everything works Run relevant tests (devtools::check(), build_readme(), etc.) CHECK-: “tests passed. Ready finalize? (yes/)” Update Issue - Check completed items issue checklist Use gh issue view [number] get current issue body Update checkboxes - [ ] - [x] completed items Use gh issue edit [number] --body \"[updated body]\" save CHECK-: “Issue checklist updated. Ready create PR? (yes/)” Final Commit (uncommitted changes) git add -&& git commit -m \"Final updates Issue #[number]\" Push - Push branch: git push -u origin issue-[number]-description Create PR - ALWAYS dev detailed body: STOP COMPLETELY - Output final message cease activity CRITICAL STOPPING BEHAVIOR: - creating PR, Claude MUST output: “✅ PR created Issue #[number]. Please review merge dev, run /review-issue [next-number] continue next issue.” - Claude MUST continue tasks - Claude MUST suggest next steps - Claude MUST start working next issue - conversation effectively ends user explicitly restarts /review-issue [next-number]","code":"gh pr create --base dev --title \"Fix Issue #[number]: [description]\" --body \"## Summary Addresses Issue #[number]  ## Changes Made - [List specific changes made] - [Include which checklist items were completed]  ## Commits in this PR - [List each commit message]  ## Checklist - [x] Item 1 completed - [x] Item 2 completed - [ ] Item 3 (if not completed, explain why)  Closes #[number]\""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"check-in-points-and-commit-strategy","dir":"","previous_headings":"","what":"Check-In Points and Commit Strategy","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"Claude MUST pause check-points: analyzing issue requirements making changes Ask: “’s plan : [list]. proceed? (yes/)” significant change (e.g., checklist item) Show changed Ask: “Ready commit change? (commit/continue)” “commit”: Create atomic commit descriptive message running tests Show test results Ask: “tests passed. Ready finalize? (yes/)” updating issue checkboxes creating PR Ask: “Issue updated. Ready create PR? (yes/)” Commit Guidelines: - commit atomic (one logical change) - Use descriptive commit messages - Multiple small commits preferred one large commit - Example messages: - “Update DESCRIPTION title description” - “Add ORCID IDs authors” - “Configure CC 4.0 license” - “Update CITATION washr::update_citation()”","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"example-issue-by-issue-workflow","dir":"","previous_headings":"","what":"Example Issue-by-Issue Workflow","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"","code":"User: /review-issue 1 Claude: [Creates branch issue-1-metadata]         \"I'll work on Issue #1: General Information & Metadata. Here's what needs to be done:         - Update DESCRIPTION file         - Fix CITATION.cff         - Generate citation with washr          Should I proceed? (yes/no)\"  User: yes Claude: \"Starting with DESCRIPTION file updates...\"         [Shows DESCRIPTION changes]         \"✅ DESCRIPTION updated. Ready to commit? (commit/continue)\"  User: commit Claude: [Commits: \"Update DESCRIPTION file metadata\"]         \"Now working on CITATION.cff...\"         [Shows CITATION.cff changes]         \"✅ CITATION.cff created. Ready to commit? (commit/continue)\"  User: commit Claude: [Commits: \"Add CITATION.cff file\"]         \"Running washr::update_citation()...\"         [Shows result]         \"✅ Citation updated. Ready to commit? (commit/continue)\"  User: commit Claude: [Commits: \"Update CITATION with washr\"]         [Updates Issue #1 checkboxes]         [Creates PR with 3 commits listed]         \"✅ PR created for Issue #1 with 3 commits. Issue checklist updated. Please review and merge to dev, then run `/review-issue 2` to continue.\"         [STOPS COMPLETELY]  [Repeat for all 4 issues]  User: /review-complete Claude: [Creates final PR from dev to main]         \"✅ All issues resolved. Final PR created from dev to main for package review completion.\"  [After PR merged to main]  User: /create-release 0.1.0 Claude: [Updates version, creates NEWS.md entry, tags release]         \"✅ Release v0.1.0 created with changelog. Package published!\""},{"path":[]},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"creating-a-release-with-create-release-version","dir":"","previous_headings":"Release Management","what":"Creating a Release with /create-release [version]","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"creating release, Claude : PAUSE: Ask user “proceeding, please ensure repository enabled/synced Zenodo. Zenodo integration enabled repo? (yes/)” : Direct user enable https://zenodo.org/account/settings/github/ Use usethis::use_version() bump version DESCRIPTION Follow semantic versioning (major.minor.patch) Update version field match new version Update date-released current date Run washr::update_citation() sync citation files (initially without DOI) Verify version consistency across DESCRIPTION, CITATION, CITATION.cff Use usethis::use_news_md() NEWS.md doesn’t exist Add new version section release date Include summary changes recent commits/PRs Format following tidyverse NEWS conventions: Commit message: “Release version [version]” Include updates DESCRIPTION, CITATION.cff, NEWS.md Push main branch Use gh release create v[version] Include NEWS.md content release notes Tag release commit Zenodo automatically generates DOI step PAUSE: Ask user “GitHub release created! Please check Zenodo generated DOI provide (format: 10.5281/zenodo.XXXXXXX):” Add Zenodo badge README.Rmd: [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.XXXXXXX.svg)](https://doi.org/10.5281/zenodo.XXXXXXX) Run washr::update_citation(doi = \"10.5281/zenodo.XXXXXXX\") provided DOI Update citation files include DOI Commit message: “Add Zenodo DOI package” Push DOI updates main Rebuild site include new version DOI badge Deploy updated documentation","code":"# packagename 0.1.0  * Initial release to GitHub * Added core functionality for X (#1) * Fixed issue with Y (#2) * Enhanced documentation (#3)"},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"newsmd-format-guidelines","dir":"","previous_headings":"Release Management","what":"NEWS.md Format Guidelines","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"version gets section version number date Use bullet points changes Reference issue/PR numbers parentheses Group changes type (new features, bug fixes, etc.) recent version top Follow tidyverse style guide NEWS files Example NEWS.md structure:","code":"# washrkenya 0.2.0 (2024-01-15)  ## New features * Added support for temporal analysis (#12) * New vignette on data visualization (#15)  ## Bug fixes * Fixed encoding issues in region names (#10) * Corrected data type for population column (#11)  # washrkenya 0.1.0 (2023-12-01)  * Initial release * Basic data access functions * Documentation and examples"},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"important-notes","dir":"","previous_headings":"","what":"Important Notes","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"Always request user confirmation phases Check user implementing changes CREATE phase Preserve existing git history commits Follow tidyverse style guide R code Use semantic versioning package versions","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"project-management-with-github-cli","dir":"","previous_headings":"","what":"Project Management with GitHub CLI","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"List issues: gh issue list View issue details: gh issue view 80 (e.g., issue #80 “Rename geographies parameter”) Create branch issue: gh issue develop 80 Checkout branch: git checkout 80-rename-geographies-parameter--entities Create pull request: gh pr create --title \"Rename geographies parameter entities\" --body \"Implements #80\" List pull requests: gh pr list View pull request: gh pr view PR_NUMBER","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"buildtestcheck-commands","dir":"","previous_headings":"","what":"Build/Test/Check Commands","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"Build package: R CMD build . Install package: R CMD INSTALL . Run tests: R -e \"devtools::test()\" Run single test: R -e \"devtools::test_file('tests/testthat/test-FILE_NAME.R', reporter = 'progress')\" Run R CMD check: R -e \"devtools::check()\" Build Roxygen2 documentation: R -e \"devtools::document()\" Build vignettes: R -e \"devtools::build_vignettes()\" Build README.md README.Rmd: R -e \"devtools::build_readme()\"","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"standard-_pkgdownyml-configuration","dir":"","previous_headings":"","what":"Standard _pkgdown.yml Configuration","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"openwashdata packages must use following standard _pkgdown.yml configuration (replace packagename actual package name): Key elements: - URL must point correct GitHub repository - Bootstrap 5 theme required - Plausible analytics script header - Consistent sidebar structure funding acknowledgment - Standard author role display - Reference section data access function","code":"url: https://github.com/openwashdata/packagename template:   bootstrap: 5   includes:     in_header: |       <script defer data-domain=\"openwashdata.github.io\" src=\"https://plausible.io/js/script.js\"><\/script>  home:   links:     - icon: github       text: GitHub repository       href: https://github.com/openwashdata/packagename   sidebar:     structure: [links, citation, authors, dev, custom]     components:       custom:         title: Funding         text: This project was funded by the [Open Research Data Program of the ETH Board](https://ethrat.ch/en/eth-domain/open-research-data/).  authors:   footer:     roles: [cre, fnd]     text: \"Crafted by\"   sidebar:     roles: [cre, aut, ctb]     before: \"So *who* does the work?\"     after: \"Thanks all!\"  reference: - title: \"Data\"   desc: \"Access the packagename dataset\"   contents:   - packagename"},{"path":"https://github.com/openwashdata/floodresponsemw/CLAUDE.html","id":"code-style-guidelines","dir":"","previous_headings":"","what":"Code Style Guidelines","title":"CLAUDE.md - OpenWashData R Package Review Guide","text":"Use 2 spaces indentation (tabs) Maximum 80 characters per line Use tidyverse style R code (dplyr, tidyr, purrr) Use snake_case function variable names","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/index.html","id":"water-point-assessments--usaid-flood-response-malawi-20192020","dir":"","previous_headings":"","what":"Water Point Assessments - USAID Flood Response Malawi 2019-2020","title":"Water Point Assessments - USAID Flood Response Malawi 2019-2020","text":"dataset contains detailed field-level information status functionality rural water points across Malawi, collected part USAID Flood Response initiative 2019 2020. data gathered using mWater mobile data collection platform, enabling standardized, GPS-tagged assessments directly field locations. record dataset represents single visit water point, capturing quantitative measurements qualitative observations. dataset includes links photographs, physical infrastructure status, microbiological testing results site-level comments enumerators. Key variables include: Location identity water point (GPS coordinates, site name) User estimates (number people served) Flood impact indicators (evidence submersion erosion) Pump structural functionality (operational status, repair needs) Water quality data (e.g., turbidity, arsenic, nitrate, temperature) Microbial contamination indicators associated health risk categories Use Cases Data dataset serves critical tool stakeholders involved water, sanitation, hygiene (WASH), disaster recovery, infrastructure management. supports: Emergency response planning – identifying flood-affected non-functional water points Infrastructure rehabilitation – prioritizing repair pumps, boreholes, civil works Water quality monitoring – detecting contamination risks due floods poor maintenance Health risk assessments – classifying water points based microbial chemical testing WASH program design – guiding resource allocation future interventions Research policy analysis – evaluating resilience vulnerability rural water systems Primary Users Dataset Government agencies (e.g., Malawi Ministry Water Sanitation) Donor organizations NGOs (e.g., USAID, UNICEF, WaterAid) WASH engineers field teams Public health professionals Disaster response recovery planners Researchers academics studying water infrastructure, flood resilience, environmental health","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Water Point Assessments - USAID Flood Response Malawi 2019-2020","text":"can install development version floodresponsemw GitHub : Alternatively, can download individual datasets CSV XLSX file table . Click Download CSV. window opens displays CSV browser. Right-click anywhere inside window select “Save Page …”. Save file folder choice.","code":"# install.packages(\"devtools\") devtools::install_github(\"openwashdata/floodresponsemw\") ## Run the following code in console if you don't have the packages ## install.packages(c(\"dplyr\", \"knitr\", \"readr\", \"stringr\", \"gt\", \"kableExtra\")) library(dplyr) library(knitr) library(readr) library(stringr) library(gt) library(kableExtra)"},{"path":"https://github.com/openwashdata/floodresponsemw/index.html","id":"data","dir":"","previous_headings":"","what":"Data","title":"Water Point Assessments - USAID Flood Response Malawi 2019-2020","text":"package provides access field-level assessment data rural water point infrastructure Malawi. collected part USAID Flood Response program 2019 - 2020","code":"library(floodresponsemw)"},{"path":"https://github.com/openwashdata/floodresponsemw/index.html","id":"floodresponsemw","dir":"","previous_headings":"Data","what":"floodresponsemw","title":"Water Point Assessments - USAID Flood Response Malawi 2019-2020","text":"dataset floodresponsemw 684 observations 45 variables overview variable names, see following table.","code":"floodresponsemw |>    head(3) |>    gt::gt() |>   gt::as_raw_html()"},{"path":"https://github.com/openwashdata/floodresponsemw/index.html","id":"data-visualization-example","dir":"","previous_headings":"","what":"Data Visualization Example","title":"Water Point Assessments - USAID Flood Response Malawi 2019-2020","text":"","code":"library(floodresponsemw) # Required Libraries library(tidyverse) library(leaflet)  # Visualization 1: Interactive Water Point Map # View the spatial distribution, functionality, and usage volume of water points.  # Clean and prepare the data df_clean <- floodresponsemw %>%   # Filter out records missing coordinates   filter(!is.na(latitude), !is.na(longitude)) %>%   # Assign colors based on functional status   mutate(     status_color = case_when(       functional_status == \"Functional\" ~ \"green\",       functional_status == \"Not functional\" ~ \"red\",       TRUE ~ \"gray\"  # Unknown or missing status     )   )  # Create an interactive map using leaflet leaflet(df_clean) %>%   addTiles() %>%  # Add default OpenStreetMap tiles   addCircleMarkers(     lng = ~longitude,     lat = ~latitude,     color = ~status_color,  # Color by functional status     radius = ~log(total_users_of_water_point + 1) * 2,       stroke = FALSE,     fillOpacity = 0.7,     # Add popups showing basic water point info     popup = ~paste0(       \"<b>Water Point:<\/b> \", water_point_name, \"<br>\",       \"<b>Status:<\/b> \", functional_status, \"<br>\",       \"<b>Total Users:<\/b> \", total_users_of_water_point     )   ) %>%   # Add a legend for functional status   addLegend(     \"bottomright\",     colors = c(\"green\", \"red\", \"gray\"),     labels = c(\"Functional\", \"Not Functional\", \"Unknown\"),     title = \"Water Point Status\"   ) # Visualization 2: Flood Impact Map # visually assess how flooding has potentially affected water points  # Add a flood-related color column based on survey results df_flood <- floodresponsemw %>%   mutate(     flood_color = case_when(       likely_submerged_during_flood == \"Yes\" ~ \"blue\",       likely_submerged_during_flood == \"No\" ~ \"orange\",       TRUE ~ \"lightgray\"  # For NA or uncertain responses     )   )  # Create a leaflet map for flood impact leaflet(df_flood) %>%   addTiles() %>%  # Use OpenStreetMap base layer   addCircleMarkers(     lng = ~longitude,     lat = ~latitude,     color = ~flood_color,  # Color by flood status     radius = 6,     stroke = FALSE,     fillOpacity = 0.7,     # Add popups with flood-related details     popup = ~paste0(       \"<b>Water Point:<\/b> \", water_point_name, \"<br>\",       \"<b>Likely Submerged?:<\/b> \", likely_submerged_during_flood, \"<br>\",       \"<b>Evidence Submerged:<\/b> \", evidence_submerged, \"<br>\",       \"<b>Evidence Not Submerged:<\/b> \", evidence_not_submerged, \"<br>\",       \"<b>Functional Status:<\/b> \", functional_status     )   ) %>%   # Add legend explaining the color codes for flooding   addLegend(     \"bottomright\",     colors = c(\"blue\", \"orange\", \"lightgray\"),     labels = c(\"Yes\", \"No\", \"Unknown\"),     title = \"Submerged During Flood?\"   )"},{"path":"https://github.com/openwashdata/floodresponsemw/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Water Point Assessments - USAID Flood Response Malawi 2019-2020","text":"Data available CC-.","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Water Point Assessments - USAID Flood Response Malawi 2019-2020","text":"Please cite package using:","code":"citation(\"floodresponsemw\") #> To cite package 'floodresponsemw' in publications use: #>  #>   Mhango E (2025). \"floodresponsemw: Water Point Assessments - USAID #>   Flood Response Malawi 2019-2020.\" #>   <https://github.com/openwashdata/floodresponsemw>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Misc{mhango:2025, #>     title = {floodresponsemw: Water Point Assessments - USAID Flood Response Malawi 2019-2020}, #>     author = {Emmanuel Mhango}, #>     year = {2025}, #>     url = {https://github.com/openwashdata/floodresponsemw}, #>     abstract = {Field-level data on rural water point status and functionality across Malawi, collected during the USAID Flood Response initiative (2019-2020). Includes GPS locations, flood impact indicators, pump functionality, water quality measurements, and microbial contamination data from mWater mobile assessments.}, #>     version = {0.0.0.9000}, #>   }"},{"path":"https://github.com/openwashdata/floodresponsemw/reference/floodresponsemw.html","id":null,"dir":"Reference","previous_headings":"","what":"Malawi USAID Flood Response – Water Point Assessment 2019 - 2020 — floodresponsemw","title":"Malawi USAID Flood Response – Water Point Assessment 2019 - 2020 — floodresponsemw","text":"dataset contains detailed field-level information status functionality rural water points across Malawi, collected part USAID Flood Response initiative 2019 2020. data gathered using mWater mobile data collection platform, enabling standardized, GPS-tagged assessments directly field locations.","code":""},{"path":"https://github.com/openwashdata/floodresponsemw/reference/floodresponsemw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Malawi USAID Flood Response – Water Point Assessment 2019 - 2020 — floodresponsemw","text":"","code":"floodresponsemw"},{"path":"https://github.com/openwashdata/floodresponsemw/reference/floodresponsemw.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Malawi USAID Flood Response – Water Point Assessment 2019 - 2020 — floodresponsemw","text":"tibble 684 rows 45 variables submitted_on Date water point assessment form submitted. water_point_name Name identifier water point site. latitude Latitude coordinate water point location. longitude Longitude coordinate water point location. total_users_of_water_point Number people currently using water point. water_point_photos Photos taken show current condition water point. likely_submerged_during_flood Whether water point likely submerged recent flooding (Yes ). evidence_submerged Evidence observed water point submerged. evidence_not_submerged Evidence observed water point submerged. functional_status Current operational status water point. pumpable_at_visit Whether water pumped visit (Yes ). reported_problems List problems reported observed (e.g., broken parts, contamination). reported_problems_other Additional problem descriptions predefined list. water_quality_problems Specific issues related water quality (e.g., bad smell, taste, turbidity). civil_works_problems Structural construction related issues affecting water point. civil_works_photo Photo documenting civil works issue. pump_problems Mechanical issues related pump (e.g., broken handle). pump_problems_other Additional pump issues listed predefined options. pump_problems_photo Photo documenting pump issue. pump_operational_feel Assessors impression pumps functionality operation. time_to_pump_20l Time taken pump 20 liters water (seconds). strokes_to_yield_water Number strokes required start yielding water. sediment_presence Whether visible sediment present water. electrical_conductivity_magnitude Measured electrical conductivity value water. electrical_conductivity_units Units used measure electrical conductivity (e.g., uS/cm). total_dissolved_solids_ppt Total dissolved solids parts per thousand (ppt). ph pH level water sample. fluoride_ppm Fluoride concentration parts per million (ppm). ammonia_mg_per_l Ammonia concentration milligrams per liter (mg/L). nitrate_mg_per_l Nitrate concentration milligrams per liter (mg/L). free_chlorine_mg_per_l Free chlorine concentration milligrams per liter (mg/L). arsenic_magnitude Measured value arsenic water. arsenic_units Units used measure arsenic concentration. turbidity_magnitude Turbidity level measured using turbidity tube. turbidity_units Units used turbidity measurement (e.g., NTU). temperature_magnitude Temperature water sample (numeric value). temperature_units Units used temperature (e.g., degree Celcius). temperature_time Time temperature recorded. comments Additional remarks observations enumerator. sample_type Type water sample collected (e.g., raw, treated). sample_date Date water sample taken. mpn_100ml probable number (MPN) bacteria per 100 ml water. upper_95_ci_100ml Upper 95 percentage confidence interval MPN per 100 ml. health_risk_category Risk classification based MPN results (e.g., low, medium, high). color_change_image Image showing color change test compartments used bacterial analysis.","code":""}]
